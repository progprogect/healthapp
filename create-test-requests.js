const { PrismaClient } = require('@prisma/client');
const { hash } = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Creating E2E test data...');

  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const clientUser = await prisma.user.findUnique({
      where: { email: 'client@test.io' }
    });

    if (!clientUser) {
      console.log('‚ùå Client user not found');
      return;
    }

    const category = await prisma.category.findFirst({
      where: { slug: 'psychologist' }
    });

    if (!category) {
      console.log('‚ùå Psychologist category not found');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    const request1 = await prisma.request.create({
      data: {
        clientId: clientUser.id,
        title: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é',
        description: '–ò—â—É –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.',
        categorySlug: 'psychologist',
        budgetMinCents: 4000,
        budgetMaxCents: 7000,
        onlineOnly: true,
        status: 'OPEN',
      }
    });

    const request2 = await prisma.request.create({
      data: {
        clientId: clientUser.id,
        title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
        description: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
        categorySlug: 'nutritionist',
        budgetMinCents: 3000,
        budgetMaxCents: 5000,
        onlineOnly: false,
        city: '–ú–æ—Å–∫–≤–∞',
        status: 'OPEN',
      }
    });

    console.log('‚úÖ Test requests created:', request1.id, request2.id);

  } catch (error) {
    console.error('‚ùå Error creating test data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();

