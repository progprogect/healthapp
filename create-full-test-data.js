const { PrismaClient } = require('@prisma/client');
const { hash } = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Creating test users and data...');

  try {
    const passwordHash = await hash('Passw0rd!', 12);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await Promise.all([
      prisma.category.upsert({
        where: { slug: 'psychologist' },
        update: {},
        create: { slug: 'psychologist', name: '–ü—Å–∏—Ö–æ–ª–æ–≥' }
      }),
      prisma.category.upsert({
        where: { slug: 'nutritionist' },
        update: {},
        create: { slug: 'nutritionist', name: '–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥' }
      }),
      prisma.category.upsert({
        where: { slug: 'personal-trainer' },
        update: {},
        create: { slug: 'personal-trainer', name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä' }
      }),
      prisma.category.upsert({
        where: { slug: 'health-coach' },
        update: {},
        create: { slug: 'health-coach', name: '–ö–æ—É—á –ø–æ –∑–¥–æ—Ä–æ–≤—å—é' }
      }),
      prisma.category.upsert({
        where: { slug: 'physiotherapist' },
        update: {},
        create: { slug: 'physiotherapist', name: '–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç' }
      }),
    ]);

    console.log('‚úÖ Categories created');

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const clientUser = await prisma.user.upsert({
      where: { email: 'client@test.io' },
      update: {},
      create: {
        email: 'client@test.io',
        passwordHash,
        role: 'CLIENT',
        status: 'ACTIVE',
        clientProfile: {
          create: {
            displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
          }
        }
      }
    });

    const specialistUser = await prisma.user.upsert({
      where: { email: 'specv@test.io' },
      update: {},
      create: {
        email: 'specv@test.io',
        passwordHash,
        role: 'SPECIALIST',
        status: 'ACTIVE',
        specialistProfile: {
          create: {
            displayName: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
            bio: '–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã',
            experienceYears: 10,
            onlineOnly: false,
            city: '–ú–æ—Å–∫–≤–∞',
            priceMinCents: 5000,
            priceMaxCents: 8000,
            verified: true,
          }
        }
      }
    });

    const adminUser = await prisma.user.upsert({
      where: { email: 'admin@test.io' },
      update: {},
      create: {
        email: 'admin@test.io',
        passwordHash,
        role: 'ADMIN',
        status: 'ACTIVE'
      }
    });

    console.log('‚úÖ Test users created');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    await prisma.specialistCategory.upsert({
      where: {
        specialistUserId_categoryId: {
          specialistUserId: specialistUser.id,
          categoryId: categories[0].id
        }
      },
      update: {},
      create: {
        specialistUserId: specialistUser.id,
        categoryId: categories[0].id // psychologist category
      }
    });

    console.log('‚úÖ Specialist categories assigned');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    const request1 = await prisma.request.create({
      data: {
        clientUserId: clientUser.id,
        categoryId: categories[0].id, // psychologist
        title: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é',
        description: '–ò—â—É –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.',
        preferredFormat: 'ONLINE',
        budgetMinCents: 4000,
        budgetMaxCents: 7000,
        city: null,
        status: 'OPEN',
      }
    });

    const request2 = await prisma.request.create({
      data: {
        clientUserId: clientUser.id,
        categoryId: categories[1].id, // nutritionist
        title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
        description: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
        preferredFormat: 'OFFLINE',
        budgetMinCents: 3000,
        budgetMaxCents: 5000,
        city: '–ú–æ—Å–∫–≤–∞',
        status: 'OPEN',
      }
    });

    console.log('‚úÖ Test requests created:', request1.id, request2.id);

  } catch (error) {
    console.error('‚ùå Error creating test data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
