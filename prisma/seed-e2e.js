const { PrismaClient } = require('@prisma/client');
const { hash } = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding E2E test data...');

  // Clear existing data
  await prisma.chatMessage.deleteMany();
  await prisma.chatThread.deleteMany();
  await prisma.application.deleteMany();
  await prisma.request.deleteMany();
  await prisma.specialistCategory.deleteMany();
  await prisma.specialistProfile.deleteMany();
  await prisma.clientProfile.deleteMany();
  await prisma.user.deleteMany();
  await prisma.category.deleteMany();

  // Create categories
  const categories = await Promise.all([
    prisma.category.create({
      data: { slug: 'psychologist', name: '–ü—Å–∏—Ö–æ–ª–æ–≥' }
    }),
    prisma.category.create({
      data: { slug: 'physiotherapist', name: '–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç' }
    }),
    prisma.category.create({
      data: { slug: 'nutritionist', name: '–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥' }
    }),
    prisma.category.create({
      data: { slug: 'health-coach', name: '–ó–¥–æ—Ä–æ–≤—å–µ-–∫–æ—É—á' }
    }),
  ]);

  console.log('‚úÖ Categories created');

  // Create test users
  const passwordHash = await hash('Passw0rd!', 12);

  // Client user
  const clientUser = await prisma.user.create({
    data: {
      email: 'client@test.io',
      passwordHash,
      role: 'CLIENT',
      status: 'ACTIVE',
      clientProfile: {
        create: {
          displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
        }
      }
    }
  });

  // Unverified specialist
  const specUser = await prisma.user.create({
    data: {
      email: 'spec@test.io',
      passwordHash,
      role: 'SPECIALIST',
      status: 'ACTIVE',
      specialistProfile: {
        create: {
          displayName: '–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
          bio: '–û–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º',
          experienceYears: 5,
          onlineOnly: true,
          priceMinCents: 3000,
          priceMaxCents: 6000,
          verified: false,
        }
      }
    }
  });

  // Verified specialist
  const specvUser = await prisma.user.create({
    data: {
      email: 'specv@test.io',
      passwordHash,
      role: 'SPECIALIST',
      status: 'ACTIVE',
      specialistProfile: {
        create: {
          displayName: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
          bio: '–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã',
          experienceYears: 10,
          onlineOnly: false,
          city: '–ú–æ—Å–∫–≤–∞',
          priceMinCents: 5000,
          priceMaxCents: 8000,
          verified: true,
        }
      }
    }
  });

  // Admin user
  const adminUser = await prisma.user.create({
    data: {
      email: 'admin@test.io',
      passwordHash,
      role: 'ADMIN',
      status: 'ACTIVE',
    }
  });

  console.log('‚úÖ Test users created');

  // Add categories to specialists
  await prisma.specialistCategory.createMany([
    {
      userId: specUser.id,
      categorySlug: 'psychologist'
    },
    {
      userId: specvUser.id,
      categorySlug: 'psychologist'
    }
  ]);

  console.log('‚úÖ Specialist categories assigned');

  // Create test requests
  const request1 = await prisma.request.create({
    data: {
      clientId: clientUser.id,
      title: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é',
      description: '–ò—â—É –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.',
      categorySlug: 'psychologist',
      budgetMinCents: 4000,
      budgetMaxCents: 7000,
      onlineOnly: true,
      status: 'OPEN',
    }
  });

  const request2 = await prisma.request.create({
    data: {
      clientId: clientUser.id,
      title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
      description: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
      categorySlug: 'nutritionist',
      budgetMinCents: 3000,
      budgetMaxCents: 5000,
      onlineOnly: false,
      city: '–ú–æ—Å–∫–≤–∞',
      status: 'OPEN',
    }
  });

  console.log('‚úÖ Test requests created');

  // Create application from verified specialist
  const application = await prisma.application.create({
    data: {
      requestId: request1.id,
      specialistId: specvUser.id,
      message: '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –ò–º–µ—é –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.',
      status: 'PENDING',
    }
  });

  console.log('‚úÖ Test application created');

  // Create chat thread
  const chatThread = await prisma.chatThread.create({
    data: {
      clientId: clientUser.id,
      specialistId: specvUser.id,
      requestId: request1.id,
    }
  });

  // Create test chat messages
  await prisma.chatMessage.createMany([
    {
      threadId: chatThread.id,
      senderId: clientUser.id,
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –º–æ—é –∑–∞—è–≤–∫—É.',
    },
    {
      threadId: chatThread.id,
      senderId: specvUser.id,
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –ø–æ–º–æ—á—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
    }
  ]);

  console.log('‚úÖ Chat thread and messages created');

  // Create additional specialists for catalog testing
  const additionalSpecialists = [];
  for (let i = 1; i <= 12; i++) {
    const specialist = await prisma.user.create({
      data: {
        email: `specialist${i}@test.io`,
        passwordHash,
        role: 'SPECIALIST',
        status: 'ACTIVE',
        specialistProfile: {
          create: {
            displayName: `–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ${i}`,
            bio: `–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–æ–º–µ—Ä ${i}`,
            experienceYears: Math.floor(Math.random() * 15) + 3,
            onlineOnly: Math.random() > 0.5,
            city: Math.random() > 0.5 ? '–ú–æ—Å–∫–≤–∞' : '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            priceMinCents: Math.floor(Math.random() * 5000) + 2000,
            priceMaxCents: Math.floor(Math.random() * 10000) + 5000,
            verified: Math.random() > 0.3, // 70% verified
          }
        }
      }
    });

    // Assign random categories
    const randomCategory = categories[Math.floor(Math.random() * categories.length)];
    await prisma.specialistCategory.create({
      data: {
        userId: specialist.id,
        categorySlug: randomCategory.slug
      }
    });

    additionalSpecialists.push(specialist);
  }

  console.log('‚úÖ Additional specialists created');

  console.log('üéâ E2E test data seeded successfully!');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
