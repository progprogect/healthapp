generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  phone                   String?
  passwordHash            String
  role                    UserRole
  status                  UserStatus           @default(ACTIVE)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  accounts                Account[]
  applications            Application[]
  chatMessages            ChatMessage[]
  chatThreadsAsClient     ChatThread[]         @relation("ClientThreads")
  chatThreadsAsSpecialist ChatThread[]         @relation("SpecialistThreads")
  clientProfile           ClientProfile?
  requests                Request[]
  sessions                Session[]
  specialistCategories    SpecialistCategory[]
  specialistProfile       SpecialistProfile?

  @@map("users")
}

model ClientProfile {
  userId      String  @id
  displayName String
  city        String?
  about       String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

model SpecialistProfile {
  userId          String   @id
  displayName     String
  bio             String
  experienceYears Int
  priceMinCents   Int?
  priceMaxCents   Int?
  currency        String   @default("USD")
  onlineOnly      Boolean  @default(false)
  city            String?
  verified        Boolean  @default(false)
  avatarUrl       String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("specialist_profiles")
}

model Category {
  id          String               @id @default(cuid())
  slug        String               @unique
  name        String
  isActive    Boolean              @default(true)
  requests    Request[]
  specialists SpecialistCategory[]

  @@map("categories")
}

model SpecialistCategory {
  specialistUserId String
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specialist       User     @relation(fields: [specialistUserId], references: [id], onDelete: Cascade)

  @@id([specialistUserId, categoryId])
  @@map("specialist_categories")
}

model Request {
  id              String          @id @default(cuid())
  clientUserId    String
  categoryId      String
  title           String
  description     String
  preferredFormat PreferredFormat
  budgetMinCents  Int?
  budgetMaxCents  Int?
  city            String?
  status          RequestStatus   @default(OPEN)
  createdAt       DateTime        @default(now())
  applications    Application[]
  chatThreads     ChatThread[]
  category        Category        @relation(fields: [categoryId], references: [id])
  client          User            @relation(fields: [clientUserId], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Application {
  id               String            @id @default(cuid())
  requestId        String
  specialistUserId String
  message          String
  status           ApplicationStatus @default(SENT)
  createdAt        DateTime          @default(now())
  request          Request           @relation(fields: [requestId], references: [id], onDelete: Cascade)
  specialist       User              @relation(fields: [specialistUserId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model ChatThread {
  id               String        @id @default(cuid())
  clientUserId     String
  specialistUserId String
  requestId        String?
  createdAt        DateTime      @default(now())
  lastMessageAt    DateTime      @default(now())
  messages         ChatMessage[]
  client           User          @relation("ClientThreads", fields: [clientUserId], references: [id], onDelete: Cascade)
  request          Request?      @relation(fields: [requestId], references: [id])
  specialist       User          @relation("SpecialistThreads", fields: [specialistUserId], references: [id], onDelete: Cascade)

  @@unique([clientUserId, specialistUserId, requestId])
  @@map("chat_threads")
}

model ChatMessage {
  id            String     @id @default(cuid())
  threadId      String
  senderUserId  String
  body          String
  attachmentUrl String?
  isRead        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  sender        User       @relation(fields: [senderUserId], references: [id], onDelete: Cascade)
  thread        ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  CLIENT
  SPECIALIST
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PreferredFormat {
  ONLINE
  OFFLINE
  ANY
}

enum RequestStatus {
  OPEN
  MATCHED
  CLOSED
  CANCELLED
}

enum ApplicationStatus {
  SENT
  ACCEPTED
  DECLINED
}
